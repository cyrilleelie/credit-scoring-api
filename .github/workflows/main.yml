# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: CI - Test et Build de l'API Scoring

# Déclencheurs du workflow
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# Liste des jobs à exécuter
jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ vars.DB_NAME }}
      API_URL: "http://127.0.0.1:8000"
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ vars.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
      API_USER: ${{ secrets.API_USER }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}
      DECISION_THRESHOLD: ${{ vars.DECISION_THRESHOLD }}
      MODEL_PATH: ${{ vars.MODEL_PATH }}
      TRAIN_DATA_FILE: "tests/fixtures/sample.train.csv"
      TEST_DATA_FILE: "tests/fixtures/sample_test.csv"

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python and Poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Initialize Database with test fixtures
        run: |
          poetry run python -m src.scripts.init_db --train-file ${{ env.TRAIN_DATA_FILE }} --test-file ${{ env.TEST_DATA_FILE }}

      # --- ÉTAPE DE DÉBOGAGE ---
      # On lance l'API en premier plan pour voir sa sortie complète.
      # Si elle crashe, on verra la trace d'erreur.
      # Si elle démarre, le job va "tourner" jusqu'à son timeout, ce qui est un succès pour ce test.
      - name: Debug API Server Startup
        run: poetry run uvicorn src.api.main:app --host 0.0.0.0 --port 8000

  # Le job de build est temporairement désactivé pour se concentrer sur le débogage
  # build_docker:
  #   needs: test
  #   ...
