# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: CI - Test et Build de l'API Scoring

# Déclencheurs du workflow
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# Liste des jobs à exécuter
jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ vars.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python and Poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Initialize Database with test fixtures
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          API_URL: "http://test.com"
          SECRET_KEY: "test_secret"
          ALGORITHM: "HS256"
          ACCESS_TOKEN_EXPIRE_MINUTES: "30"
          API_USER: "test_user"
          API_PASSWORD: "test_password"
          DECISION_THRESHOLD: "0.5"
          MODEL_PATH: "path/to/fake/model.joblib"
          TRAIN_DATA_FILE: "tests/fixtures/sample.train.csv"
          TEST_DATA_FILE: "tests/fixtures/sample_test.csv"
        run: |
          poetry run python -m src.scripts.init_db --train-file ${{ env.TRAIN_DATA_FILE }} --test-file ${{ env.TEST_DATA_FILE }}

      - name: Start API Server in background
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          API_URL: "http://127.0.0.1:8000"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ vars.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
          API_USER: ${{ secrets.API_USER }}
          API_PASSWORD: ${{ secrets.API_PASSWORD }}
          DECISION_THRESHOLD: ${{ vars.DECISION_THRESHOLD }}
          MODEL_PATH: ${{ vars.MODEL_PATH }}
          TRAIN_DATA_FILE: "tests/fixtures/sample.train.csv"
          TEST_DATA_FILE: "tests/fixtures/sample_test.csv"
        run: poetry run uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &

      - name: Run tests against the live API
        env:
          API_URL: "http://127.0.0.1:8000"
          API_USER: ${{ secrets.API_USER }}
          API_PASSWORD: ${{ secrets.API_PASSWORD }}
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ vars.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
          DECISION_THRESHOLD: ${{ vars.DECISION_THRESHOLD }}
          MODEL_PATH: ${{ vars.MODEL_PATH }}
          TRAIN_DATA_FILE: "tests/fixtures/sample.train.csv"
          TEST_DATA_FILE: "tests/fixtures/sample_test.csv"
        run: |
          # --- CORRECTION APPLIQUÉE ICI ---
          # Boucle de vérification qui attend que l'API soit prête, avec un timeout de 30s
          echo "Waiting for API to be ready..."
          timeout 30s bash -c 'until curl -s http://127.0.0.1:8000/ > /dev/null; do echo "API not up yet, sleeping..."; sleep 2; done'
          echo "API is ready. Running tests."
          
          poetry run pytest

  build_docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for validation
        run: docker build -t scoring-api:${{ github.sha }} .
